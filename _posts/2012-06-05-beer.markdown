---
title: Beer, in one chart
layout: post
published: true
tags: [d3, underscore]
scripts:
 - http://d3js.org/d3.v2.js
 - http://documentcloud.github.com/underscore/underscore-min.js

excerpt: "Mmm... beer. As you can see, there's been a massive shift from large- to small-scale."
---
<style type="text/css">
svg path {
    stroke-width: 1;
    fill-opacity: .5;
}
</style>

My colleagues at [Planet Money](http://www.npr.org/blogs/money/) had a great post last week looking at the [growth of small breweries](http://www.npr.org/blogs/money/2012/05/17/152845779/more-breweries-less-beer) in the United States, which are increasingly supplanting traditional beer makers:

> Beer production has been flat in the U.S. for decades â€” it's actually a tiny bit lower than it was 30 years ago (find a comprehensive data set here). And the number of big breweries has gone down.
> 
> But over the same time, the number of small, independent breweries in America has exploded.

<div id="chart"> </div>

Mmm... beer. In this chart, the blue area is traditional breweries; orange is specialty brewers. As you can see, there's been a massive shift from large- to small-scale.

One of my goals here was to figure out stacked area charts in [D3][]. One thing that continues to trip me up is the coordinate system, where `(0,0)` is the top-left corner, not the bottom-left. That means height is set by pushing elements down, not up. The complete code is below.

[D3]: http://d3js.org

<script src="https://gist.github.com/2879169.js?file=gistfile1.js"> </script>

<script type="text/javascript">
// mise en place
function translate(x,y) {
    return 'translate(' + x + ',' + y + ')';
}

var pad = 40,
    height = 400,
    width = parseInt(d3.select('#chart').style('width')) - pad,
    url = "/visible-data/data/beer.csv",
    layers;

var chart = d3.select('#chart').append('svg')
    .style('height', height + pad)
    .style('width', width + pad)
  .append('g')
    .attr('transform', translate(0, pad/2));

// scales
var colors = d3.scale.category10();

var x = d3.scale.linear()
    .range([0, width]);

var y = d3.scale.linear()
    .range([height, 0])
    .domain([0, 2000]); // just going to hard code this

var xAxis = d3.svg.axis()
    .scale(x)
    //.ticks(7)
    .tickFormat(String)
    .orient('bottom');

var yAxis = d3.svg.axis()
    .scale(y)
    .ticks(7)
    .tickFormat(d3.format(','))
    .orient('right');

var stack = d3.layout.stack()
    .offset('zero')
    .values(function(d) { return d.values; });

var area = d3.svg.area()
    .x(function(d) { return x(d.x); })
    .y0(function(d) { return y(d.y0 + d.y); })
    .y1(function(d) { return y(d.y0); });

d3.csv(url, function(data) {
    window.data = data;
    _.each(data, function(d) {
        for (var i in d) {
            // everything is a number
            d[i] = +d[i];
        }
    });

    var years = _.pluck(data, 'Year');
    x.domain(d3.extent(years));

    layers = _.map(['Traditional Breweries', 'Specialty Breweries'], function(name) {
        return {
            name: name,
            values: _.map(data, function(d, i) {
                return {x: d.Year, y: d[name]}
            })
        }
    })

    // add axes
    chart.append('g')
        .attr('class', 'x axis')
        .attr('transform', translate(0,height))
        .call(xAxis);

    chart.append('g')
        .attr('class', 'y axis')
        .attr('transform', translate(width,0))
        .call(yAxis);

    chart.append('g')
      .selectAll('path')
        .data(stack(layers))
      .enter().append('path')
        .attr('class', function(d) { return d.name; })
        .attr('d', function(d) { return area(d.values); })
        .attr('stroke', function(d,i) { return colors(i); })
        .attr('fill', function(d,i) { return colors(i); });

});

</script>